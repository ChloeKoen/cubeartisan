export default Cube;
declare const Cube: mongoose.Model<{
    tags: unknown[];
    categoryPrefixes: unknown[];
    cards: {
        tags: {
            type?: unknown;
            minlength?: unknown;
        }[];
        index?: unknown;
        name?: unknown;
        rarity?: unknown;
        cmc?: unknown;
        colors?: unknown;
        addedTmsp?: unknown;
        cardID?: unknown;
        colorCategory?: unknown;
        finish?: unknown;
        imgBackUrl?: unknown;
        imgUrl?: unknown;
        notes?: unknown;
        status?: unknown;
        type_line?: unknown;
        isUnlimited?: unknown;
    }[];
    maybe: {
        tags: {
            type?: unknown;
            minlength?: unknown;
        }[];
        index?: unknown;
        name?: unknown;
        rarity?: unknown;
        cmc?: unknown;
        colors?: unknown;
        addedTmsp?: unknown;
        cardID?: unknown;
        colorCategory?: unknown;
        finish?: unknown;
        imgBackUrl?: unknown;
        imgUrl?: unknown;
        notes?: unknown;
        status?: unknown;
        type_line?: unknown;
        isUnlimited?: unknown;
    }[];
    users_following: {
        _id?: any;
        id?: {
            [x: number]: unknown;
            [Symbol.iterator]?: {};
            [Symbol.toStringTag]?: unknown;
            set?: {};
            map?: {};
            filter?: {};
            indexOf?: {};
            lastIndexOf?: {};
            slice?: {};
            length?: unknown;
            includes?: {};
            at?: {};
            toString: {};
            valueOf: {};
            equals?: {};
            toJSON?: {};
            find?: {};
            byteLength?: unknown;
            compare?: {};
            reverse?: {};
            sort?: {};
            fill?: {};
            copyWithin?: {};
            toLocaleString: {};
            buffer?: {
                [Symbol.toStringTag]?: unknown;
                slice?: {};
                byteLength?: unknown;
            } | {
                [Symbol.toStringTag]?: unknown;
                [Symbol.species]?: any;
                slice?: {};
                byteLength?: unknown;
            };
            write?: {};
            copy?: {};
            subarray?: {};
            writeBigInt64BE?: {};
            writeBigInt64LE?: {};
            writeBigUInt64BE?: {};
            writeBigUint64BE?: {};
            writeBigUInt64LE?: {};
            writeBigUint64LE?: {};
            writeUIntLE?: {};
            writeUintLE?: {};
            writeUIntBE?: {};
            writeUintBE?: {};
            writeIntLE?: {};
            writeIntBE?: {};
            readBigUInt64BE?: {};
            readBigUint64BE?: {};
            readBigUInt64LE?: {};
            readBigUint64LE?: {};
            readBigInt64BE?: {};
            readBigInt64LE?: {};
            readUIntLE?: {};
            readUintLE?: {};
            readUIntBE?: {};
            readUintBE?: {};
            readIntLE?: {};
            readIntBE?: {};
            readUInt8?: {};
            readUint8?: {};
            readUInt16LE?: {};
            readUint16LE?: {};
            readUInt16BE?: {};
            readUint16BE?: {};
            readUInt32LE?: {};
            readUint32LE?: {};
            readUInt32BE?: {};
            readUint32BE?: {};
            readInt8?: {};
            readInt16LE?: {};
            readInt16BE?: {};
            readInt32LE?: {};
            readInt32BE?: {};
            readFloatLE?: {};
            readFloatBE?: {};
            readDoubleLE?: {};
            readDoubleBE?: {};
            swap16?: {};
            swap32?: {};
            swap64?: {};
            writeUInt8?: {};
            writeUint8?: {};
            writeUInt16LE?: {};
            writeUint16LE?: {};
            writeUInt16BE?: {};
            writeUint16BE?: {};
            writeUInt32LE?: {};
            writeUint32LE?: {};
            writeUInt32BE?: {};
            writeUint32BE?: {};
            writeInt8?: {};
            writeInt16LE?: {};
            writeInt16BE?: {};
            writeInt32LE?: {};
            writeInt32BE?: {};
            writeFloatLE?: {};
            writeFloatBE?: {};
            writeDoubleLE?: {};
            writeDoubleBE?: {};
            entries?: {};
            keys?: {};
            values?: {};
            BYTES_PER_ELEMENT?: unknown;
            byteOffset?: unknown;
            every?: {};
            findIndex?: {};
            forEach?: {};
            join?: {};
            reduce?: {};
            reduceRight?: {};
            some?: {};
        };
        toString: {};
        equals?: {};
        toJSON?: {};
        toHexString?: {};
        _bsontype?: mongoose.Types.ObjectId;
        generationTime?: unknown;
        getTimestamp?: {};
        inspect?: {};
    }[];
    basics: unknown[];
    cardOracles: unknown[];
    keywords: unknown[];
    categories: unknown[];
    tag_colors: {
        tag?: unknown;
        color?: unknown;
    }[];
    default_sorts: unknown[];
    draft_formats: {
        packs: {
            steps: {
                action?: unknown;
                amount?: unknown;
            }[];
            slots: unknown[];
        }[];
        title?: unknown;
        multiples?: unknown;
        markdown?: unknown;
        defaultSeats?: unknown;
    }[];
    name?: unknown;
    type?: unknown;
    shortID?: unknown;
    owner?: {
        _id?: any;
        id?: {
            [x: number]: unknown;
            [Symbol.iterator]?: {};
            [Symbol.toStringTag]?: unknown;
            set?: {};
            map?: {};
            filter?: {};
            indexOf?: {};
            lastIndexOf?: {};
            slice?: {};
            length?: unknown;
            includes?: {};
            at?: {};
            toString: {};
            valueOf: {};
            equals?: {};
            toJSON?: {};
            find?: {};
            byteLength?: unknown;
            compare?: {};
            reverse?: {};
            sort?: {};
            fill?: {};
            copyWithin?: {};
            toLocaleString: {};
            buffer?: {
                [Symbol.toStringTag]?: unknown;
                slice?: {};
                byteLength?: unknown;
            } | {
                [Symbol.toStringTag]?: unknown;
                [Symbol.species]?: any;
                slice?: {};
                byteLength?: unknown;
            };
            write?: {};
            copy?: {};
            subarray?: {};
            writeBigInt64BE?: {};
            writeBigInt64LE?: {};
            writeBigUInt64BE?: {};
            writeBigUint64BE?: {};
            writeBigUInt64LE?: {};
            writeBigUint64LE?: {};
            writeUIntLE?: {};
            writeUintLE?: {};
            writeUIntBE?: {};
            writeUintBE?: {};
            writeIntLE?: {};
            writeIntBE?: {};
            readBigUInt64BE?: {};
            readBigUint64BE?: {};
            readBigUInt64LE?: {};
            readBigUint64LE?: {};
            readBigInt64BE?: {};
            readBigInt64LE?: {};
            readUIntLE?: {};
            readUintLE?: {};
            readUIntBE?: {};
            readUintBE?: {};
            readIntLE?: {};
            readIntBE?: {};
            readUInt8?: {};
            readUint8?: {};
            readUInt16LE?: {};
            readUint16LE?: {};
            readUInt16BE?: {};
            readUint16BE?: {};
            readUInt32LE?: {};
            readUint32LE?: {};
            readUInt32BE?: {};
            readUint32BE?: {};
            readInt8?: {};
            readInt16LE?: {};
            readInt16BE?: {};
            readInt32LE?: {};
            readInt32BE?: {};
            readFloatLE?: {};
            readFloatBE?: {};
            readDoubleLE?: {};
            readDoubleBE?: {};
            swap16?: {};
            swap32?: {};
            swap64?: {};
            writeUInt8?: {};
            writeUint8?: {};
            writeUInt16LE?: {};
            writeUint16LE?: {};
            writeUInt16BE?: {};
            writeUint16BE?: {};
            writeUInt32LE?: {};
            writeUint32LE?: {};
            writeUInt32BE?: {};
            writeUint32BE?: {};
            writeInt8?: {};
            writeInt16LE?: {};
            writeInt16BE?: {};
            writeInt32LE?: {};
            writeInt32BE?: {};
            writeFloatLE?: {};
            writeFloatBE?: {};
            writeDoubleLE?: {};
            writeDoubleBE?: {};
            entries?: {};
            keys?: {};
            values?: {};
            BYTES_PER_ELEMENT?: unknown;
            byteOffset?: unknown;
            every?: {};
            findIndex?: {};
            forEach?: {};
            join?: {};
            reduce?: {};
            reduceRight?: {};
            some?: {};
        };
        toString: {};
        equals?: {};
        toJSON?: {};
        toHexString?: {};
        _bsontype?: mongoose.Types.ObjectId;
        generationTime?: unknown;
        getTimestamp?: {};
        inspect?: {};
    };
    isListed?: unknown;
    privatePrices?: unknown;
    isFeatured?: unknown;
    overrideCategory?: unknown;
    categoryOverride?: unknown;
    defaultDraftFormat?: unknown;
    numDecks?: unknown;
    description?: unknown;
    image_uri?: unknown;
    image_artist?: unknown;
    image_name?: unknown;
    owner_name?: unknown;
    date_updated?: unknown;
    updated_string?: unknown;
    default_show_unsorted?: unknown;
    card_count?: unknown;
    defaultPrinting?: unknown;
    disableNotifications?: unknown;
    schemaVersion?: unknown;
    defaultStatus?: unknown;
}, {}, {}, {}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, any, {}, "type", {
    name: string;
    tags: string[];
    shortID: string;
    owner: mongoose.Types.ObjectId;
    isListed: boolean;
    privatePrices: boolean;
    isFeatured: boolean;
    overrideCategory: boolean;
    categoryOverride: string;
    categoryPrefixes: string[];
    cards: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: {
            type?: string;
            minlength?: unknown;
        }[];
        type_line: string;
        isUnlimited: boolean;
        colors?: {
            enum: unknown[];
            type?: string;
        }[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    maybe: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: {
            type?: string;
            minlength?: unknown;
        }[];
        type_line: string;
        isUnlimited: boolean;
        colors?: {
            enum: unknown[];
            type?: string;
        }[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    defaultDraftFormat: number;
    numDecks: number;
    users_following: mongoose.Types.ObjectId[];
    defaultPrinting: string;
    disableNotifications: boolean;
    schemaVersion: number;
    basics: string[];
    cardOracles: string[];
    keywords: string[];
    categories: string[];
    tag_colors: {
        tag?: string;
        color?: string;
    }[];
    default_sorts: string[];
    draft_formats: {
        packs: {
            steps: {
                amount: number;
                action?: string;
            }[];
            slots: string[];
        }[];
        title?: string;
        multiples?: boolean;
        markdown?: string;
        defaultSeats?: number;
    }[];
    defaultStatus: string;
    type?: string;
    description?: string;
    image_uri?: string;
    image_artist?: string;
    image_name?: string;
    owner_name?: string;
    date_updated?: Date;
    updated_string?: string;
    default_show_unsorted?: boolean;
    card_count?: number;
}>>;
import mongoose from "mongoose";
//# sourceMappingURL=cube.d.ts.map