export default Deck;
declare const Deck: mongoose.Model<{
    cards: {
        tags: {
            type?: unknown;
            minlength?: unknown;
        }[];
        index?: unknown;
        name?: unknown;
        rarity?: unknown;
        cmc?: unknown;
        colors?: unknown;
        addedTmsp?: unknown;
        cardID?: unknown;
        colorCategory?: unknown;
        finish?: unknown;
        imgBackUrl?: unknown;
        imgUrl?: unknown;
        notes?: unknown;
        status?: unknown;
        type_line?: unknown;
        isUnlimited?: unknown;
    }[];
    basics: unknown[];
    seats: {
        bot: unknown[];
        deck: unknown[][][];
        sideboard: unknown[][][];
        pickorder: unknown[];
        name?: unknown;
        description?: unknown;
        username?: unknown;
        userid?: unknown;
    }[];
    owner?: unknown;
    schemaVersion?: unknown;
    date?: unknown;
    draft?: {
        _id?: any;
        id?: {
            [x: number]: unknown;
            [Symbol.iterator]?: {};
            [Symbol.toStringTag]?: unknown;
            set?: {};
            map?: {};
            filter?: {};
            indexOf?: {};
            lastIndexOf?: {};
            slice?: {};
            length?: unknown;
            includes?: {};
            at?: {};
            toString: {};
            valueOf: {};
            equals?: {};
            toJSON?: {};
            find?: {};
            byteLength?: unknown;
            compare?: {};
            reverse?: {};
            sort?: {};
            fill?: {};
            copyWithin?: {};
            buffer?: {
                [Symbol.toStringTag]?: unknown;
                slice?: {};
                byteLength?: unknown;
            } | {
                [Symbol.toStringTag]?: unknown;
                [Symbol.species]?: any;
                slice?: {};
                byteLength?: unknown;
            };
            toLocaleString: {};
            write?: {};
            copy?: {};
            subarray?: {};
            writeBigInt64BE?: {};
            writeBigInt64LE?: {};
            writeBigUInt64BE?: {};
            writeBigUint64BE?: {};
            writeBigUInt64LE?: {};
            writeBigUint64LE?: {};
            writeUIntLE?: {};
            writeUintLE?: {};
            writeUIntBE?: {};
            writeUintBE?: {};
            writeIntLE?: {};
            writeIntBE?: {};
            readBigUInt64BE?: {};
            readBigUint64BE?: {};
            readBigUInt64LE?: {};
            readBigUint64LE?: {};
            readBigInt64BE?: {};
            readBigInt64LE?: {};
            readUIntLE?: {};
            readUintLE?: {};
            readUIntBE?: {};
            readUintBE?: {};
            readIntLE?: {};
            readIntBE?: {};
            readUInt8?: {};
            readUint8?: {};
            readUInt16LE?: {};
            readUint16LE?: {};
            readUInt16BE?: {};
            readUint16BE?: {};
            readUInt32LE?: {};
            readUint32LE?: {};
            readUInt32BE?: {};
            readUint32BE?: {};
            readInt8?: {};
            readInt16LE?: {};
            readInt16BE?: {};
            readInt32LE?: {};
            readInt32BE?: {};
            readFloatLE?: {};
            readFloatBE?: {};
            readDoubleLE?: {};
            readDoubleBE?: {};
            swap16?: {};
            swap32?: {};
            swap64?: {};
            writeUInt8?: {};
            writeUint8?: {};
            writeUInt16LE?: {};
            writeUint16LE?: {};
            writeUInt16BE?: {};
            writeUint16BE?: {};
            writeUInt32LE?: {};
            writeUint32LE?: {};
            writeUInt32BE?: {};
            writeUint32BE?: {};
            writeInt8?: {};
            writeInt16LE?: {};
            writeInt16BE?: {};
            writeInt32LE?: {};
            writeInt32BE?: {};
            writeFloatLE?: {};
            writeFloatBE?: {};
            writeDoubleLE?: {};
            writeDoubleBE?: {};
            entries?: {};
            keys?: {};
            values?: {};
            BYTES_PER_ELEMENT?: unknown;
            byteOffset?: unknown;
            every?: {};
            findIndex?: {};
            forEach?: {};
            join?: {};
            reduce?: {};
            reduceRight?: {};
            some?: {};
        };
        toString: {};
        equals?: {};
        toJSON?: {};
        _bsontype?: mongoose.Types.ObjectId;
        generationTime?: unknown;
        toHexString?: {};
        getTimestamp?: {};
        inspect?: {};
    };
    cube?: unknown;
    cubename?: unknown;
    cubeOwner?: unknown;
}, {}, {}, {}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any>, {}, {}, {}, {}, "type", {
    cards: {
        index: number;
        name: string;
        rarity: string;
        cmc: number;
        colorCategory: string;
        finish: string;
        status: string;
        tags: {
            type?: string;
            minlength?: unknown;
        }[];
        type_line: string;
        isUnlimited: boolean;
        colors?: {
            enum: unknown[];
            type?: string;
        }[];
        addedTmsp?: Date;
        cardID?: string;
        imgBackUrl?: string;
        imgUrl?: string;
        notes?: string;
    }[];
    schemaVersion: number;
    basics: number[];
    draft: mongoose.Types.ObjectId;
    cubename: string;
    seats: {
        description: string;
        bot: string[];
        deck: number[][][];
        sideboard: number[][][];
        pickorder: number[];
        name?: string;
        username?: string;
        userid?: mongoose.Types.ObjectId;
    }[];
    owner?: mongoose.Types.ObjectId;
    date?: Date;
    cube?: mongoose.Types.ObjectId;
    cubeOwner?: mongoose.Types.ObjectId;
}>>;
import mongoose from "mongoose";
//# sourceMappingURL=deck.d.ts.map